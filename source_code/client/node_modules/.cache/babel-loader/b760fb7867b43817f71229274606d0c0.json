{"ast":null,"code":"var _jsxFileName = \"/Users/joshgonzalez/Desktop/source_code/client/src/MyS3UploadComponent.jsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MyS3UploadComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = ev => {\n      this.setState({\n        success: false,\n        url: \"\"\n      });\n    };\n    this.handleUpload = ev => {\n      let file = this.uploadInput.files[0];\n      // Split the filename to get the name and type\n      let fileParts = this.uploadInput.files[0].name.split('.');\n      let fileName = fileParts[0];\n      let fileType = fileParts[1];\n      console.log(\"Preparing the upload\");\n      axios.post(\"http://localhost:9000/sign_s3\", {\n        fileName: fileName,\n        fileType: fileType\n      }).then(response => {\n        var returnData = response.data.data.returnData;\n        var signedRequest = returnData.signedRequest;\n        var url = returnData.url;\n        this.setState({\n          url: url\n        });\n        console.log(\"Recieved a signed request \" + signedRequest);\n\n        // Put the fileType in the headers for the upload\n        var options = {\n          headers: {\n            'Content-Type': fileType\n          }\n        };\n        axios.put(signedRequest, file, options).then(result => {\n          console.log(\"Response from s3\");\n          this.setState({\n            success: true\n          });\n        }).catch(error => {\n          alert(\"ERROR \" + JSON.stringify(error));\n        });\n      }).catch(error => {\n        alert(JSON.stringify(error));\n      });\n    };\n    this.state = {\n      success: false,\n      url: \"\"\n    };\n  }\n  render() {\n    const SuccessMessage = () => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: 50\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: 'green'\n        },\n        children: \"SUCCESSFUL UPLOAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: this.state.url,\n        children: \"Access the file here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"center\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"UPLOAD A FILE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), this.state.success ? /*#__PURE__*/_jsxDEV(SuccessMessage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 33\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: this.handleChange,\n          ref: ref => {\n            this.uploadInput = ref;\n          },\n          type: \"file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleUpload,\n          children: \"UPLOAD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","axios","MyS3UploadComponent","constructor","props","handleChange","ev","setState","success","url","handleUpload","file","uploadInput","files","fileParts","name","split","fileName","fileType","console","log","post","then","response","returnData","data","signedRequest","options","headers","put","result","catch","error","alert","JSON","stringify","state","render","SuccessMessage","padding","color","ref"],"sources":["/Users/joshgonzalez/Desktop/source_code/client/src/MyS3UploadComponent.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nexport class MyS3UploadComponent extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      success : false,\n      url : \"\"\n    }\n  }\n  \n  handleChange = (ev) => {\n    this.setState({success: false, url : \"\"});\n    \n  }\n  // Perform the upload\n  handleUpload = (ev) => {\n    let file = this.uploadInput.files[0];\n    // Split the filename to get the name and type\n    let fileParts = this.uploadInput.files[0].name.split('.');\n    let fileName = fileParts[0];\n    let fileType = fileParts[1];\n    console.log(\"Preparing the upload\");\n    axios.post(\"http://localhost:9000/sign_s3\",{\n      fileName : fileName,\n      fileType : fileType\n    })\n    .then(response => {\n      var returnData = response.data.data.returnData;\n      var signedRequest = returnData.signedRequest;\n      var url = returnData.url;\n      this.setState({url: url})\n      console.log(\"Recieved a signed request \" + signedRequest);\n      \n     // Put the fileType in the headers for the upload\n      var options = {\n        headers: {\n          'Content-Type': fileType\n        }\n      };\n      axios.put(signedRequest,file,options)\n      .then(result => {\n        console.log(\"Response from s3\")\n        this.setState({success: true});\n      })\n      .catch(error => {\n        alert(\"ERROR \" + JSON.stringify(error));\n      })\n    })\n    .catch(error => {\n      alert(JSON.stringify(error));\n    })\n  }\n  \n  \n  render() {\n    const SuccessMessage = () => (\n      <div style={{padding:50}}>\n        <h3 style={{color: 'green'}}>SUCCESSFUL UPLOAD</h3>\n        <a href={this.state.url}>Access the file here</a>\n        <br/>\n      </div>\n    )\n    return (\n      <div className=\"App\">\n        <center>\n          <h1>UPLOAD A FILE</h1>\n          {this.state.success ? <SuccessMessage/> : null}\n          <input onChange={this.handleChange} ref={(ref) => { this.uploadInput = ref; }} type=\"file\"/>\n          <br/>\n          <button onClick={this.handleUpload}>UPLOAD</button>\n        </center>\n      </div>\n    );\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}